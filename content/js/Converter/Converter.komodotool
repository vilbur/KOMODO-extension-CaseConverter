{
  "keyboard_shortcut": "", 
  "name": "Converter", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** Convert any case of string to any case", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction Converter()", 
    "\t{\t\t", 
    "\t\tvar case_types = [", 
    "\t\t\t'Lower',", 
    "\t\t\t'Capital',", 
    "\t\t\t'Title',", 
    "\t\t\t'Upper',", 
    "\t\t\t'Snake lower',", 
    "\t\t\t'Snake capital',", 
    "\t\t\t'Snake title',", 
    "\t\t\t'Snake upper',", 
    "\t\t\t'Kebab lower',", 
    "\t\t\t'Kebab capital',", 
    "\t\t\t'Kebab title',", 
    "\t\t\t'Kebab upper',", 
    "\t\t\t'Camel',", 
    "\t\t\t'Pascal',", 
    "\t\t];", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t", 
    "\t\tvar self\t= this;", 
    "\t\tvar koEditor\t= require(\"ko/editor\");", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\t", 
    "\t\tvar current_pos;", 
    "\t\tvar current_anchor;", 
    "\t\tvar position_last;", 
    "", 
    "\t\tvar content_current\t= '';", 
    "\t\tvar content_new\t= '';", 
    "\t\tvar content_last\t= '';\t\t", 
    "", 
    "\t\tvar text_current\t= '';", 
    "\t\tvar text_converted\t= '';", 
    "\t\tvar text_last\t= '';", 
    "\t\t", 
    "\t\tvar selection_starts\t= [];", 
    "\t\t", 
    "\t\tvar is_conversion_of_same_string\t= false; // for continuing conversion", 
    "\t\t", 
    "\t\t/** convertSelection", 
    "\t\t */", 
    "\t\tthis.convertSelection = function()", 
    "\t\t{", 
    "\t\t\tsetPositionCurrent();", 
    "\t\t\tsetTextCurrent();", 
    "\t\t\tconsole.log(  'current_pos: ' + current_pos );", 
    "\t\t\tconsole.log(  'position_last: ' + position_last );", 
    "", 
    "\t\t\tisConversionOfSameString();", 
    "\t\t\t", 
    "\t\t\tsetContentCurrent();\t\t\t", 
    "\t\t\tconvertText();", 
    "\t\t\tsetSelectionStarts();\t\t\t", 
    "\t\t\t", 
    "\t\t\tko.views.manager.currentView.scimoz.beginUndoAction();", 
    "\t\t\t", 
    "\t\t\ttry {", 
    "\t\t\t\t", 
    "\t\t\t\tif( selection_starts.length == 1 )", 
    "\t\t\t\t\treplaceSingleSelection();", 
    "\t\t\t\t\t", 
    "\t\t\t\telse", 
    "\t\t\t\t\treplaceMultiSelection();", 
    "\t\t\t\t", 
    "\t\t\t\tsetPositionLast();", 
    "", 
    "\t\t\t} finally {", 
    "\t\t\t\tko.views.manager.currentView.scimoz.endUndoAction();", 
    "\t\t\t} ", 
    "\t\t\t", 
    "\t\t\t\t", 
    "\t\t}; ", 
    "\t\t/** Test", 
    "\t\t */", 
    "\t\tthis.convert = function(string)", 
    "\t\t{", 
    "\t\t\tvar type\t= this.StringCaseType.getStringType(string);", 
    "\t\t\tvar next_type\t= getNextType(type);", 
    "", 
    "\t\t\treturn new ko.extensions.CaseConverter.StringCaseConverter(string)['to' + next_type[0]](next_type[1] ? next_type[1] : '');", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tCONNTENT", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** setContentCurrent", 
    "\t\t */", 
    "\t\tvar setContentCurrent = function()", 
    "\t\t{", 
    "\t\t\tcontent_current\t= koEditor.getValue();  ", 
    "\t\t}; ", 
    "\t\t/*---------------------------------------", 
    "\t\t\tREPLACE SELECTION", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** replaceSingleSelection", 
    "\t\t */", 
    "\t\tvar replaceSingleSelection = function()", 
    "\t\t{", 
    "\t\t\tsaveSelection();", 
    "\t\t\t\t\t\t\t\t\t", 
    "\t\t\tkoEditor.replaceSelection(text_converted);", 
    "\t\t\t", 
    "\t\t\trestoreSelection();", 
    "\t\t};", 
    "\t\t/** replaceMultiSelection", 
    "\t\t */", 
    "\t\tvar replaceMultiSelection = function()", 
    "\t\t{", 
    "\t\t\tvar last_sel_pos\t= 0;", 
    "\t\t\t", 
    "\t\t\t/** setNewContent", 
    "\t\t\t */", 
    "\t\t\tvar setNewContent = function()", 
    "\t\t\t{", 
    "\t\t\t\t/** Parse file content and add new text`s tabstop to each selection", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addTabstopToNewContent = function(sel_start)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar content_substr = content_current.substring( last_sel_pos, sel_start );", 
    "\t\t\t\t\t//Logger.info(content_substr, 'CaseConverter: '+'content_substr');", 
    "", 
    "\t\t\t\t\tcontent_new += content_substr + '[[%tabstop1:'+text_converted+']]';\t\t\t\t\t", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tlast_sel_pos\t= sel_start + text_current.length;\t\t\t\t", 
    "\t\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\t\tcontent_new\t= '';", 
    "\t\t\t\t", 
    "\t\t\t\tfor(var s=0; s<selection_starts.length;s++)", 
    "\t\t\t\t\taddTabstopToNewContent(selection_starts[s]);", 
    "\t\t\t\t\t", 
    "\t\t\t\t/* Add content after last tabstop */", 
    "\t\t\t\tcontent_new += content_current.substring( last_sel_pos, content_current.length );", 
    "\t\t\t\t", 
    "\t\t\t\t/** Remove '[[%tabstop:...]]' from contetn_new */", 
    "\t\t\t\tcontent_last\t= content_new.replace(/\\[\\[%tabstop\\d:([^\\]]+)\\]\\]/gi, '$1');", 
    "\t\t\t\t//Logger.info(content_last, 'CaseConverter: '+'content_last');", 
    "\t\t\t\t", 
    "\t\t\t\t", 
    "\t\t\t};", 
    "\t\t\t/** removeContent", 
    "\t\t\t */", 
    "\t\t\tvar removeContent = function()", 
    "\t\t\t{", 
    "\t\t\t\tkoEditor.setValue('');\t", 
    "\t\t\t};", 
    "\t\t\t/** insertSnippet", 
    "\t\t\t */", 
    "\t\t\tvar insertSnippet = function()", 
    "\t\t\t{", 
    "\t\t\t\tvar content_snippet = {", 
    "\t\t\t\t\thasAttribute: function(name) {", 
    "\t\t\t\t\t\treturn name in this;", 
    "\t\t\t\t\t},", 
    "\t\t\t\t\tgetStringAttribute: function(name) {", 
    "\t\t\t\t\t\treturn this[name];", 
    "\t\t\t\t\t},", 
    "\t\t\t\t\tname:\t\"content snippet\",", 
    "\t\t\t\t\tindent_relative:\t\"true\",", 
    "\t\t\t\t\tset_selection:\t\"true\", ", 
    "\t\t\t\t\tvalue:\tcontent_new", 
    "\t\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\t\tko.projects.snippetInsert(content_snippet); ", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tsetNewContent();", 
    "\t\t\tupdateSelectionStarts();", 
    "\t\t\t//Logger.info(content_new, 'CaseConverter: '+'content_new');", 
    "\t\t\tremoveContent();", 
    "\t\t\tinsertSnippet();", 
    "\t\t\t", 
    "\t\t};", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tANALYZE SELECTIONS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** setTextCurrent", 
    "\t\t */", 
    "\t\tvar setTextCurrent = function()", 
    "\t\t{", 
    "\t\t\t//text_current\t= is_conversion_of_same_string ? text_last : koEditor.getSelection();", 
    "\t\t\ttext_current\t= koEditor.getSelection();\t\t\t", 
    "\t\t};", 
    "\t\t/** convertText", 
    "\t\t */", 
    "\t\tvar convertText = function()", 
    "\t\t{", 
    "\t\t\ttext_converted = self.convert(text_current);", 
    "\t\t\t", 
    "\t\t\ttext_last = text_converted;", 
    "\t\t};", 
    "\t\t/** isConversionOfSameString", 
    "\t\t */", 
    "\t\tvar isConversionOfSameString = function()", 
    "\t\t{", 
    "\t\t\t//is_conversion_of_same_string = text_current===text_last && current_pos === position_last && koEditor.getValue() === content_last;", 
    "\t\t\tis_conversion_of_same_string = text_current===text_last && current_pos === position_last;", 
    "\t\t\t", 
    "\t\t\tconsole.log(  'is_conversion_of_same_string: ' + is_conversion_of_same_string );", 
    "\t\t\t//console.log(  'text_current: ' + text_current );", 
    "\t\t\t//console.log(  'text_last: ' + text_last );", 
    "\t\t}; ", 
    "\t\t/** setSelectionStarts", 
    "\t\t */", 
    "\t\tvar setSelectionStarts = function()", 
    "\t\t{\t", 
    "\t\t\tif( is_conversion_of_same_string )", 
    "\t\t\t\treturn;", 
    "\t\t\t", 
    "\t\t\tselection_starts\t= [];", 
    "", 
    "\t\t\twhile ( selection_starts.indexOf( koEditor.getCursorPosition('absolute')-text_current.length) === -1 )", 
    "\t\t\t{", 
    "\t\t\t\tselection_starts.push(koEditor.getCursorPosition('absolute')-text_current.length);", 
    "\t\t\t\tko.commands.doCommand('cmd_removePrevWordInCaretSet');", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tselection_starts.sort(function(a, b){return a - b;}); ", 
    "\t\t};", 
    "\t\t/** Update previous selections starts with previous converted text", 
    "\t\t */", 
    "\t\tvar updateSelectionStarts = function()", 
    "\t\t{\t\t\t\t", 
    "\t\t\tif( text_current.length == text_converted.length )", 
    "\t\t\t\treturn; ", 
    "\t\t\t", 
    "\t\t\tselection_starts = selection_starts.map(function(sel_start, index)", 
    "\t\t\t{", 
    "\t\t\t\treturn  sel_start + index * (text_converted.length - text_current.length);", 
    "\t\t\t});", 
    "\t\t}; ", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar setPositionCurrent = function()", 
    "\t\t{", 
    "\t\t\tcurrent_pos\t= ko.views.manager.currentView.scimoz.currentPos;", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar setPositionLast = function()", 
    "\t\t{", 
    "\t\t\tposition_last = ko.views.manager.currentView.scimoz.currentPos;", 
    "\t\t};", 
    "\t\t/**  ", 
    "\t\t */", 
    "\t\tvar saveSelection = function() ", 
    "\t\t{ ", 
    "\t\t  current_pos  \t= scimoz.currentPos; ", 
    "\t\t  current_anchor\t= scimoz.anchor; ", 
    "\t\t}; ", 
    "", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar restoreSelection = function()", 
    "\t\t{", 
    "\t\t\tscimoz.currentPos\t= position.current.anchor > position.current.pos ? position.current.pos : position.current.anchor;", 
    "\t\t\tscimoz.anchor\t= scimoz.currentPos + text_converted.length;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tGET NEXT CASE TYPE ", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** getNextType", 
    "\t\t */", 
    "\t\tvar getNextType = function(type)", 
    "\t\t{", 
    "\t\t\tvar next_index\t= getNextIndex( type );", 
    "\t\t\t", 
    "\t\t\treturn case_types[next_index].split(/\\s/);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** getNextIndex", 
    "\t\t */", 
    "\t\tvar getNextIndex = function(type)", 
    "\t\t{", 
    "\t\t\tvar index\t= case_types.indexOf( type ) ;", 
    "\t\t\t", 
    "\t\t\treturn index < case_types.length-1 ? index +1 : 0;", 
    "\t\t};", 
    "\t\t", 
    "\t}", 
    "\treturn Converter;", 
    "", 
    "})().apply(ko.extensions.CaseConverter.Converter);"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.12", 
  "async": false, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/text_uppercase.png"
}